
STK_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c84  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e18  08000e20  00010e20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e18  08000e18  00010e20  2**0
                  CONTENTS
  4 .ARM          00000000  08000e18  08000e18  00010e20  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e18  08000e20  00010e20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e18  08000e18  00010e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e1c  08000e1c  00010e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000000  08000e20  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000e20  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010e20  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000e7d  00000000  00000000  00010e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005dd  00000000  00000000  00011ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f8  00000000  00000000  000122b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000190  00000000  00000000  000124a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001547  00000000  00000000  00012638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000012f8  00000000  00000000  00013b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000060d6  00000000  00000000  00014e77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0001af4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000688  00000000  00000000  0001afa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000e00 	.word	0x08000e00

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000e00 	.word	0x08000e00

080001d4 <MEXTI_vEnableLine>:
/*static*/ //void (* EXTI0_CallBack) (void) = 0 ;

/********************************************************** Start_FUNCTION  **********************************************************/
/**/
void MEXTI_vEnableLine(u8 Copy_u8LineNum)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
	/* */
	EXTI_IMR|=(1U<<Copy_u8LineNum);
 80001de:	4b07      	ldr	r3, [pc, #28]	; (80001fc <MEXTI_vEnableLine+0x28>)
 80001e0:	681a      	ldr	r2, [r3, #0]
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	2101      	movs	r1, #1
 80001e6:	fa01 f303 	lsl.w	r3, r1, r3
 80001ea:	4904      	ldr	r1, [pc, #16]	; (80001fc <MEXTI_vEnableLine+0x28>)
 80001ec:	4313      	orrs	r3, r2
 80001ee:	600b      	str	r3, [r1, #0]
	
}
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr
 80001fc:	40013c00 	.word	0x40013c00

08000200 <MEXTI_vTriggerTyp>:

/*********************************************************** END_ FUNCTION   *********************************************************/

/********************************************************** Start_FUNCTION  **********************************************************/
void MEXTI_vTriggerTyp(u8 Copy_u8LineNum , u8 Copy_u8State)
{
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
 8000208:	460a      	mov	r2, r1
 800020a:	71fb      	strb	r3, [r7, #7]
 800020c:	4613      	mov	r3, r2
 800020e:	71bb      	strb	r3, [r7, #6]
	switch (Copy_u8State)
 8000210:	79bb      	ldrb	r3, [r7, #6]
 8000212:	2b02      	cmp	r3, #2
 8000214:	d02e      	beq.n	8000274 <MEXTI_vTriggerTyp+0x74>
 8000216:	2b02      	cmp	r3, #2
 8000218:	dc3f      	bgt.n	800029a <MEXTI_vTriggerTyp+0x9a>
 800021a:	2b00      	cmp	r3, #0
 800021c:	d002      	beq.n	8000224 <MEXTI_vTriggerTyp+0x24>
 800021e:	2b01      	cmp	r3, #1
 8000220:	d014      	beq.n	800024c <MEXTI_vTriggerTyp+0x4c>
	       EXTI_FTSR |=(u32)(1U<<Copy_u8LineNum);
	       EXTI_RTSR |=(u32)(1U<<Copy_u8LineNum);
	break ;
	}
	
}
 8000222:	e03a      	b.n	800029a <MEXTI_vTriggerTyp+0x9a>
	  EXTI_RTSR |=(u32)(1U<<Copy_u8LineNum);
 8000224:	4b20      	ldr	r3, [pc, #128]	; (80002a8 <MEXTI_vTriggerTyp+0xa8>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	2101      	movs	r1, #1
 800022c:	fa01 f303 	lsl.w	r3, r1, r3
 8000230:	491d      	ldr	r1, [pc, #116]	; (80002a8 <MEXTI_vTriggerTyp+0xa8>)
 8000232:	4313      	orrs	r3, r2
 8000234:	600b      	str	r3, [r1, #0]
	  CLR_BIT(EXTI->FTSR,Copy_u8LineNum);
 8000236:	4b1d      	ldr	r3, [pc, #116]	; (80002ac <MEXTI_vTriggerTyp+0xac>)
 8000238:	68da      	ldr	r2, [r3, #12]
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	2101      	movs	r1, #1
 800023e:	fa01 f303 	lsl.w	r3, r1, r3
 8000242:	43db      	mvns	r3, r3
 8000244:	4919      	ldr	r1, [pc, #100]	; (80002ac <MEXTI_vTriggerTyp+0xac>)
 8000246:	4013      	ands	r3, r2
 8000248:	60cb      	str	r3, [r1, #12]
	break ;
 800024a:	e026      	b.n	800029a <MEXTI_vTriggerTyp+0x9a>
	      EXTI_FTSR |=(u32)(1U<<Copy_u8LineNum);
 800024c:	4b18      	ldr	r3, [pc, #96]	; (80002b0 <MEXTI_vTriggerTyp+0xb0>)
 800024e:	681a      	ldr	r2, [r3, #0]
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	2101      	movs	r1, #1
 8000254:	fa01 f303 	lsl.w	r3, r1, r3
 8000258:	4915      	ldr	r1, [pc, #84]	; (80002b0 <MEXTI_vTriggerTyp+0xb0>)
 800025a:	4313      	orrs	r3, r2
 800025c:	600b      	str	r3, [r1, #0]
		  CLR_BIT(EXTI->RTSR,Copy_u8LineNum);
 800025e:	4b13      	ldr	r3, [pc, #76]	; (80002ac <MEXTI_vTriggerTyp+0xac>)
 8000260:	689a      	ldr	r2, [r3, #8]
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	2101      	movs	r1, #1
 8000266:	fa01 f303 	lsl.w	r3, r1, r3
 800026a:	43db      	mvns	r3, r3
 800026c:	490f      	ldr	r1, [pc, #60]	; (80002ac <MEXTI_vTriggerTyp+0xac>)
 800026e:	4013      	ands	r3, r2
 8000270:	608b      	str	r3, [r1, #8]
	break ;
 8000272:	e012      	b.n	800029a <MEXTI_vTriggerTyp+0x9a>
	       EXTI_FTSR |=(u32)(1U<<Copy_u8LineNum);
 8000274:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <MEXTI_vTriggerTyp+0xb0>)
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	2101      	movs	r1, #1
 800027c:	fa01 f303 	lsl.w	r3, r1, r3
 8000280:	490b      	ldr	r1, [pc, #44]	; (80002b0 <MEXTI_vTriggerTyp+0xb0>)
 8000282:	4313      	orrs	r3, r2
 8000284:	600b      	str	r3, [r1, #0]
	       EXTI_RTSR |=(u32)(1U<<Copy_u8LineNum);
 8000286:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <MEXTI_vTriggerTyp+0xa8>)
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	2101      	movs	r1, #1
 800028e:	fa01 f303 	lsl.w	r3, r1, r3
 8000292:	4905      	ldr	r1, [pc, #20]	; (80002a8 <MEXTI_vTriggerTyp+0xa8>)
 8000294:	4313      	orrs	r3, r2
 8000296:	600b      	str	r3, [r1, #0]
	break ;
 8000298:	bf00      	nop
}
 800029a:	bf00      	nop
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	40013c08 	.word	0x40013c08
 80002ac:	40013c00 	.word	0x40013c00
 80002b0:	40013c0c 	.word	0x40013c0c

080002b4 <MEXTI_voidSelectPort>:
/*********************************************************** END_ FUNCTION   *********************************************************/

/********************************************************** Start_FUNCTION  **********************************************************/

void MEXTI_voidSelectPort(  u8 Copy_u8LineNum  , u8 Copy_u8PortID  )
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	460a      	mov	r2, r1
 80002be:	71fb      	strb	r3, [r7, #7]
 80002c0:	4613      	mov	r3, r2
 80002c2:	71bb      	strb	r3, [r7, #6]
	
	/* For Port From 0 To 3 We Have SYSCFG_EXTICR1	*/
	if(Copy_u8LineNum <= 3 )
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	2b03      	cmp	r3, #3
 80002c8:	d819      	bhi.n	80002fe <MEXTI_voidSelectPort+0x4a>
	{
		/* Make The Place =0000 -----> Safty*/
		SYSCFG_EXTICR1 &=~(u8)(0b1111<<(4*Copy_u8LineNum )) ;
 80002ca:	4b3e      	ldr	r3, [pc, #248]	; (80003c4 <MEXTI_voidSelectPort+0x110>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	79fa      	ldrb	r2, [r7, #7]
 80002d0:	0092      	lsls	r2, r2, #2
 80002d2:	210f      	movs	r1, #15
 80002d4:	fa01 f202 	lsl.w	r2, r1, r2
 80002d8:	b2d2      	uxtb	r2, r2
 80002da:	43d2      	mvns	r2, r2
 80002dc:	4611      	mov	r1, r2
 80002de:	4a39      	ldr	r2, [pc, #228]	; (80003c4 <MEXTI_voidSelectPort+0x110>)
 80002e0:	400b      	ands	r3, r1
 80002e2:	6013      	str	r3, [r2, #0]
		/* Sheft By 4 Bit */
		SYSCFG_EXTICR1 |= (u8)(Copy_u8PortID <<(4*Copy_u8LineNum )) ;
 80002e4:	4b37      	ldr	r3, [pc, #220]	; (80003c4 <MEXTI_voidSelectPort+0x110>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	79b9      	ldrb	r1, [r7, #6]
 80002ea:	79fa      	ldrb	r2, [r7, #7]
 80002ec:	0092      	lsls	r2, r2, #2
 80002ee:	fa01 f202 	lsl.w	r2, r1, r2
 80002f2:	b2d2      	uxtb	r2, r2
 80002f4:	4611      	mov	r1, r2
 80002f6:	4a33      	ldr	r2, [pc, #204]	; (80003c4 <MEXTI_voidSelectPort+0x110>)
 80002f8:	430b      	orrs	r3, r1
 80002fa:	6013      	str	r3, [r2, #0]
		Copy_u8LineNum -= 12 ;
		/* Make The Place =0000 -----> Safty*/
		SYSCFG_EXTICR4 &=~ (0b1111<<(4*Copy_u8LineNum )) ;
		SYSCFG_EXTICR4 |= (Copy_u8PortID <<(4*Copy_u8LineNum )) ;
	}
}
 80002fc:	e05c      	b.n	80003b8 <MEXTI_voidSelectPort+0x104>
	else if(Copy_u8LineNum <= 7)
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	2b07      	cmp	r3, #7
 8000302:	d81c      	bhi.n	800033e <MEXTI_voidSelectPort+0x8a>
		Copy_u8LineNum -=4 ; 
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	3b04      	subs	r3, #4
 8000308:	71fb      	strb	r3, [r7, #7]
		SYSCFG_EXTICR2 &=~ (u8)(0b1111<<(4*Copy_u8LineNum )) ;
 800030a:	4b2f      	ldr	r3, [pc, #188]	; (80003c8 <MEXTI_voidSelectPort+0x114>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	79fa      	ldrb	r2, [r7, #7]
 8000310:	0092      	lsls	r2, r2, #2
 8000312:	210f      	movs	r1, #15
 8000314:	fa01 f202 	lsl.w	r2, r1, r2
 8000318:	b2d2      	uxtb	r2, r2
 800031a:	43d2      	mvns	r2, r2
 800031c:	4611      	mov	r1, r2
 800031e:	4a2a      	ldr	r2, [pc, #168]	; (80003c8 <MEXTI_voidSelectPort+0x114>)
 8000320:	400b      	ands	r3, r1
 8000322:	6013      	str	r3, [r2, #0]
		SYSCFG_EXTICR2 |= (u8)(Copy_u8PortID <<(4*Copy_u8LineNum )) ;
 8000324:	4b28      	ldr	r3, [pc, #160]	; (80003c8 <MEXTI_voidSelectPort+0x114>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	79b9      	ldrb	r1, [r7, #6]
 800032a:	79fa      	ldrb	r2, [r7, #7]
 800032c:	0092      	lsls	r2, r2, #2
 800032e:	fa01 f202 	lsl.w	r2, r1, r2
 8000332:	b2d2      	uxtb	r2, r2
 8000334:	4611      	mov	r1, r2
 8000336:	4a24      	ldr	r2, [pc, #144]	; (80003c8 <MEXTI_voidSelectPort+0x114>)
 8000338:	430b      	orrs	r3, r1
 800033a:	6013      	str	r3, [r2, #0]
}
 800033c:	e03c      	b.n	80003b8 <MEXTI_voidSelectPort+0x104>
	else if(Copy_u8LineNum <= 11)
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	2b0b      	cmp	r3, #11
 8000342:	d81c      	bhi.n	800037e <MEXTI_voidSelectPort+0xca>
		Copy_u8LineNum -= 8 ;
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	3b08      	subs	r3, #8
 8000348:	71fb      	strb	r3, [r7, #7]
		SYSCFG_EXTICR3 &=~ (u8)(0b1111<<(4*Copy_u8LineNum )) ;
 800034a:	4b20      	ldr	r3, [pc, #128]	; (80003cc <MEXTI_voidSelectPort+0x118>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	79fa      	ldrb	r2, [r7, #7]
 8000350:	0092      	lsls	r2, r2, #2
 8000352:	210f      	movs	r1, #15
 8000354:	fa01 f202 	lsl.w	r2, r1, r2
 8000358:	b2d2      	uxtb	r2, r2
 800035a:	43d2      	mvns	r2, r2
 800035c:	4611      	mov	r1, r2
 800035e:	4a1b      	ldr	r2, [pc, #108]	; (80003cc <MEXTI_voidSelectPort+0x118>)
 8000360:	400b      	ands	r3, r1
 8000362:	6013      	str	r3, [r2, #0]
		SYSCFG_EXTICR3 |= (u8)(Copy_u8PortID <<(4*Copy_u8LineNum )) ;
 8000364:	4b19      	ldr	r3, [pc, #100]	; (80003cc <MEXTI_voidSelectPort+0x118>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	79b9      	ldrb	r1, [r7, #6]
 800036a:	79fa      	ldrb	r2, [r7, #7]
 800036c:	0092      	lsls	r2, r2, #2
 800036e:	fa01 f202 	lsl.w	r2, r1, r2
 8000372:	b2d2      	uxtb	r2, r2
 8000374:	4611      	mov	r1, r2
 8000376:	4a15      	ldr	r2, [pc, #84]	; (80003cc <MEXTI_voidSelectPort+0x118>)
 8000378:	430b      	orrs	r3, r1
 800037a:	6013      	str	r3, [r2, #0]
}
 800037c:	e01c      	b.n	80003b8 <MEXTI_voidSelectPort+0x104>
	else if(Copy_u8LineNum <= 15)
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	2b0f      	cmp	r3, #15
 8000382:	d819      	bhi.n	80003b8 <MEXTI_voidSelectPort+0x104>
		Copy_u8LineNum -= 12 ;
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	3b0c      	subs	r3, #12
 8000388:	71fb      	strb	r3, [r7, #7]
		SYSCFG_EXTICR4 &=~ (0b1111<<(4*Copy_u8LineNum )) ;
 800038a:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <MEXTI_voidSelectPort+0x11c>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	79fa      	ldrb	r2, [r7, #7]
 8000390:	0092      	lsls	r2, r2, #2
 8000392:	210f      	movs	r1, #15
 8000394:	fa01 f202 	lsl.w	r2, r1, r2
 8000398:	43d2      	mvns	r2, r2
 800039a:	4611      	mov	r1, r2
 800039c:	4a0c      	ldr	r2, [pc, #48]	; (80003d0 <MEXTI_voidSelectPort+0x11c>)
 800039e:	400b      	ands	r3, r1
 80003a0:	6013      	str	r3, [r2, #0]
		SYSCFG_EXTICR4 |= (Copy_u8PortID <<(4*Copy_u8LineNum )) ;
 80003a2:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <MEXTI_voidSelectPort+0x11c>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	79b9      	ldrb	r1, [r7, #6]
 80003a8:	79fa      	ldrb	r2, [r7, #7]
 80003aa:	0092      	lsls	r2, r2, #2
 80003ac:	fa01 f202 	lsl.w	r2, r1, r2
 80003b0:	4611      	mov	r1, r2
 80003b2:	4a07      	ldr	r2, [pc, #28]	; (80003d0 <MEXTI_voidSelectPort+0x11c>)
 80003b4:	430b      	orrs	r3, r1
 80003b6:	6013      	str	r3, [r2, #0]
}
 80003b8:	bf00      	nop
 80003ba:	370c      	adds	r7, #12
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr
 80003c4:	40013808 	.word	0x40013808
 80003c8:	4001380c 	.word	0x4001380c
 80003cc:	40013810 	.word	0x40013810
 80003d0:	40013814 	.word	0x40013814

080003d4 <MGOIP_voidSetPinMode>:
									MODE_ALTF
									MODE_ANALOG	

						*/
 void MGOIP_voidSetPinMode(u8 copy_u8PORT ,u8 copy_u8PIN,u8 copy_u8MODE) 
 {
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
 80003de:	460b      	mov	r3, r1
 80003e0:	71bb      	strb	r3, [r7, #6]
 80003e2:	4613      	mov	r3, r2
 80003e4:	717b      	strb	r3, [r7, #5]
	 
		 
	        switch (copy_u8PORT)
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	2b07      	cmp	r3, #7
 80003ea:	d873      	bhi.n	80004d4 <MGOIP_voidSetPinMode+0x100>
 80003ec:	a201      	add	r2, pc, #4	; (adr r2, 80003f4 <MGOIP_voidSetPinMode+0x20>)
 80003ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f2:	bf00      	nop
 80003f4:	08000415 	.word	0x08000415
 80003f8:	0800042d 	.word	0x0800042d
 80003fc:	08000445 	.word	0x08000445
 8000400:	0800045d 	.word	0x0800045d
 8000404:	08000475 	.word	0x08000475
 8000408:	0800048d 	.word	0x0800048d
 800040c:	080004a5 	.word	0x080004a5
 8000410:	080004bd 	.word	0x080004bd
	        {
	  	              case GPIOA_PORT: GPIOA_MODER |=(u32)  (copy_u8MODE << (2*copy_u8PIN)); break;
 8000414:	4b33      	ldr	r3, [pc, #204]	; (80004e4 <MGOIP_voidSetPinMode+0x110>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	7979      	ldrb	r1, [r7, #5]
 800041a:	79ba      	ldrb	r2, [r7, #6]
 800041c:	0052      	lsls	r2, r2, #1
 800041e:	fa01 f202 	lsl.w	r2, r1, r2
 8000422:	4611      	mov	r1, r2
 8000424:	4a2f      	ldr	r2, [pc, #188]	; (80004e4 <MGOIP_voidSetPinMode+0x110>)
 8000426:	430b      	orrs	r3, r1
 8000428:	6013      	str	r3, [r2, #0]
 800042a:	e054      	b.n	80004d6 <MGOIP_voidSetPinMode+0x102>
					  case GPIOB_PORT: GPIOB_MODER |=(u32)  (copy_u8MODE << (2*copy_u8PIN)); break;
 800042c:	4b2e      	ldr	r3, [pc, #184]	; (80004e8 <MGOIP_voidSetPinMode+0x114>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	7979      	ldrb	r1, [r7, #5]
 8000432:	79ba      	ldrb	r2, [r7, #6]
 8000434:	0052      	lsls	r2, r2, #1
 8000436:	fa01 f202 	lsl.w	r2, r1, r2
 800043a:	4611      	mov	r1, r2
 800043c:	4a2a      	ldr	r2, [pc, #168]	; (80004e8 <MGOIP_voidSetPinMode+0x114>)
 800043e:	430b      	orrs	r3, r1
 8000440:	6013      	str	r3, [r2, #0]
 8000442:	e048      	b.n	80004d6 <MGOIP_voidSetPinMode+0x102>
					  case GPIOC_PORT: GPIOC_MODER |=(u32)  (copy_u8MODE << (2*copy_u8PIN)); break;
 8000444:	4b29      	ldr	r3, [pc, #164]	; (80004ec <MGOIP_voidSetPinMode+0x118>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	7979      	ldrb	r1, [r7, #5]
 800044a:	79ba      	ldrb	r2, [r7, #6]
 800044c:	0052      	lsls	r2, r2, #1
 800044e:	fa01 f202 	lsl.w	r2, r1, r2
 8000452:	4611      	mov	r1, r2
 8000454:	4a25      	ldr	r2, [pc, #148]	; (80004ec <MGOIP_voidSetPinMode+0x118>)
 8000456:	430b      	orrs	r3, r1
 8000458:	6013      	str	r3, [r2, #0]
 800045a:	e03c      	b.n	80004d6 <MGOIP_voidSetPinMode+0x102>
					  case GPIOD_PORT: GPIOD_MODER |=(u32)  (copy_u8MODE << (2*copy_u8PIN)); break;
 800045c:	4b24      	ldr	r3, [pc, #144]	; (80004f0 <MGOIP_voidSetPinMode+0x11c>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	7979      	ldrb	r1, [r7, #5]
 8000462:	79ba      	ldrb	r2, [r7, #6]
 8000464:	0052      	lsls	r2, r2, #1
 8000466:	fa01 f202 	lsl.w	r2, r1, r2
 800046a:	4611      	mov	r1, r2
 800046c:	4a20      	ldr	r2, [pc, #128]	; (80004f0 <MGOIP_voidSetPinMode+0x11c>)
 800046e:	430b      	orrs	r3, r1
 8000470:	6013      	str	r3, [r2, #0]
 8000472:	e030      	b.n	80004d6 <MGOIP_voidSetPinMode+0x102>
					  case GPIOE_PORT: GPIOE_MODER |=(u32)  (copy_u8MODE << (2*copy_u8PIN)); break;
 8000474:	4b1f      	ldr	r3, [pc, #124]	; (80004f4 <MGOIP_voidSetPinMode+0x120>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	7979      	ldrb	r1, [r7, #5]
 800047a:	79ba      	ldrb	r2, [r7, #6]
 800047c:	0052      	lsls	r2, r2, #1
 800047e:	fa01 f202 	lsl.w	r2, r1, r2
 8000482:	4611      	mov	r1, r2
 8000484:	4a1b      	ldr	r2, [pc, #108]	; (80004f4 <MGOIP_voidSetPinMode+0x120>)
 8000486:	430b      	orrs	r3, r1
 8000488:	6013      	str	r3, [r2, #0]
 800048a:	e024      	b.n	80004d6 <MGOIP_voidSetPinMode+0x102>
					  case GPIOF_PORT: GPIOF_MODER |=(u32)  (copy_u8MODE << (2*copy_u8PIN)); break;
 800048c:	4b1a      	ldr	r3, [pc, #104]	; (80004f8 <MGOIP_voidSetPinMode+0x124>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	7979      	ldrb	r1, [r7, #5]
 8000492:	79ba      	ldrb	r2, [r7, #6]
 8000494:	0052      	lsls	r2, r2, #1
 8000496:	fa01 f202 	lsl.w	r2, r1, r2
 800049a:	4611      	mov	r1, r2
 800049c:	4a16      	ldr	r2, [pc, #88]	; (80004f8 <MGOIP_voidSetPinMode+0x124>)
 800049e:	430b      	orrs	r3, r1
 80004a0:	6013      	str	r3, [r2, #0]
 80004a2:	e018      	b.n	80004d6 <MGOIP_voidSetPinMode+0x102>
					  case GPIOG_PORT: GPIOG_MODER |=(u32)  (copy_u8MODE << (2*copy_u8PIN)); break;
 80004a4:	4b15      	ldr	r3, [pc, #84]	; (80004fc <MGOIP_voidSetPinMode+0x128>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	7979      	ldrb	r1, [r7, #5]
 80004aa:	79ba      	ldrb	r2, [r7, #6]
 80004ac:	0052      	lsls	r2, r2, #1
 80004ae:	fa01 f202 	lsl.w	r2, r1, r2
 80004b2:	4611      	mov	r1, r2
 80004b4:	4a11      	ldr	r2, [pc, #68]	; (80004fc <MGOIP_voidSetPinMode+0x128>)
 80004b6:	430b      	orrs	r3, r1
 80004b8:	6013      	str	r3, [r2, #0]
 80004ba:	e00c      	b.n	80004d6 <MGOIP_voidSetPinMode+0x102>
					  case GPIOH_PORT: GPIOH_MODER |=(u32)  (copy_u8MODE << (2*copy_u8PIN)); break;		
 80004bc:	4b10      	ldr	r3, [pc, #64]	; (8000500 <MGOIP_voidSetPinMode+0x12c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	7979      	ldrb	r1, [r7, #5]
 80004c2:	79ba      	ldrb	r2, [r7, #6]
 80004c4:	0052      	lsls	r2, r2, #1
 80004c6:	fa01 f202 	lsl.w	r2, r1, r2
 80004ca:	4611      	mov	r1, r2
 80004cc:	4a0c      	ldr	r2, [pc, #48]	; (8000500 <MGOIP_voidSetPinMode+0x12c>)
 80004ce:	430b      	orrs	r3, r1
 80004d0:	6013      	str	r3, [r2, #0]
 80004d2:	e000      	b.n	80004d6 <MGOIP_voidSetPinMode+0x102>
					  default: break;		
 80004d4:	bf00      	nop
		     }
	 
 }
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	40020000 	.word	0x40020000
 80004e8:	40020400 	.word	0x40020400
 80004ec:	40020800 	.word	0x40020800
 80004f0:	40020c00 	.word	0x40020c00
 80004f4:	40021000 	.word	0x40021000
 80004f8:	40021400 	.word	0x40021400
 80004fc:	40021800 	.word	0x40021800
 8000500:	40021c00 	.word	0x40021c00

08000504 <MGPIO_voidSetOutType>:
								OUTPUT_TYPE_PUSH_PULL
								OUTPUT_TYPE_OPEN_DRAIN	

						*/
void MGPIO_voidSetOutType(u8 copy_u8PORT ,u8 copy_u8PIN,u8 copy_u8Type) 
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
 800050e:	460b      	mov	r3, r1
 8000510:	71bb      	strb	r3, [r7, #6]
 8000512:	4613      	mov	r3, r2
 8000514:	717b      	strb	r3, [r7, #5]
		      switch (copy_u8PORT)
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	2b07      	cmp	r3, #7
 800051a:	d86b      	bhi.n	80005f4 <MGPIO_voidSetOutType+0xf0>
 800051c:	a201      	add	r2, pc, #4	; (adr r2, 8000524 <MGPIO_voidSetOutType+0x20>)
 800051e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000522:	bf00      	nop
 8000524:	08000545 	.word	0x08000545
 8000528:	0800055b 	.word	0x0800055b
 800052c:	08000571 	.word	0x08000571
 8000530:	08000587 	.word	0x08000587
 8000534:	0800059d 	.word	0x0800059d
 8000538:	080005b3 	.word	0x080005b3
 800053c:	080005c9 	.word	0x080005c9
 8000540:	080005df 	.word	0x080005df
		      {
			      case GPIOA_PORT: GPIOA_OTYPER |=(u32)  (copy_u8Type << (copy_u8PIN)); break;
 8000544:	4b2f      	ldr	r3, [pc, #188]	; (8000604 <MGPIO_voidSetOutType+0x100>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	7979      	ldrb	r1, [r7, #5]
 800054a:	79ba      	ldrb	r2, [r7, #6]
 800054c:	fa01 f202 	lsl.w	r2, r1, r2
 8000550:	4611      	mov	r1, r2
 8000552:	4a2c      	ldr	r2, [pc, #176]	; (8000604 <MGPIO_voidSetOutType+0x100>)
 8000554:	430b      	orrs	r3, r1
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	e04d      	b.n	80005f6 <MGPIO_voidSetOutType+0xf2>
						case GPIOB_PORT: GPIOB_OTYPER |=(u32)  (copy_u8Type << (copy_u8PIN)); break;
 800055a:	4b2b      	ldr	r3, [pc, #172]	; (8000608 <MGPIO_voidSetOutType+0x104>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	7979      	ldrb	r1, [r7, #5]
 8000560:	79ba      	ldrb	r2, [r7, #6]
 8000562:	fa01 f202 	lsl.w	r2, r1, r2
 8000566:	4611      	mov	r1, r2
 8000568:	4a27      	ldr	r2, [pc, #156]	; (8000608 <MGPIO_voidSetOutType+0x104>)
 800056a:	430b      	orrs	r3, r1
 800056c:	6013      	str	r3, [r2, #0]
 800056e:	e042      	b.n	80005f6 <MGPIO_voidSetOutType+0xf2>
						case GPIOC_PORT: GPIOC_OTYPER |=(u32)  (copy_u8Type << (copy_u8PIN)); break;
 8000570:	4b26      	ldr	r3, [pc, #152]	; (800060c <MGPIO_voidSetOutType+0x108>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	7979      	ldrb	r1, [r7, #5]
 8000576:	79ba      	ldrb	r2, [r7, #6]
 8000578:	fa01 f202 	lsl.w	r2, r1, r2
 800057c:	4611      	mov	r1, r2
 800057e:	4a23      	ldr	r2, [pc, #140]	; (800060c <MGPIO_voidSetOutType+0x108>)
 8000580:	430b      	orrs	r3, r1
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	e037      	b.n	80005f6 <MGPIO_voidSetOutType+0xf2>
						case GPIOD_PORT: GPIOD_OTYPER |=(u32)  (copy_u8Type << (copy_u8PIN)); break;
 8000586:	4b22      	ldr	r3, [pc, #136]	; (8000610 <MGPIO_voidSetOutType+0x10c>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	7979      	ldrb	r1, [r7, #5]
 800058c:	79ba      	ldrb	r2, [r7, #6]
 800058e:	fa01 f202 	lsl.w	r2, r1, r2
 8000592:	4611      	mov	r1, r2
 8000594:	4a1e      	ldr	r2, [pc, #120]	; (8000610 <MGPIO_voidSetOutType+0x10c>)
 8000596:	430b      	orrs	r3, r1
 8000598:	6013      	str	r3, [r2, #0]
 800059a:	e02c      	b.n	80005f6 <MGPIO_voidSetOutType+0xf2>
						case GPIOE_PORT: GPIOE_OTYPER |=(u32)  (copy_u8Type << (copy_u8PIN)); break;
 800059c:	4b1d      	ldr	r3, [pc, #116]	; (8000614 <MGPIO_voidSetOutType+0x110>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	7979      	ldrb	r1, [r7, #5]
 80005a2:	79ba      	ldrb	r2, [r7, #6]
 80005a4:	fa01 f202 	lsl.w	r2, r1, r2
 80005a8:	4611      	mov	r1, r2
 80005aa:	4a1a      	ldr	r2, [pc, #104]	; (8000614 <MGPIO_voidSetOutType+0x110>)
 80005ac:	430b      	orrs	r3, r1
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	e021      	b.n	80005f6 <MGPIO_voidSetOutType+0xf2>
						case GPIOF_PORT: GPIOF_OTYPER |=(u32)  (copy_u8Type << (copy_u8PIN)); break;
 80005b2:	4b19      	ldr	r3, [pc, #100]	; (8000618 <MGPIO_voidSetOutType+0x114>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	7979      	ldrb	r1, [r7, #5]
 80005b8:	79ba      	ldrb	r2, [r7, #6]
 80005ba:	fa01 f202 	lsl.w	r2, r1, r2
 80005be:	4611      	mov	r1, r2
 80005c0:	4a15      	ldr	r2, [pc, #84]	; (8000618 <MGPIO_voidSetOutType+0x114>)
 80005c2:	430b      	orrs	r3, r1
 80005c4:	6013      	str	r3, [r2, #0]
 80005c6:	e016      	b.n	80005f6 <MGPIO_voidSetOutType+0xf2>
						case GPIOG_PORT: GPIOG_OTYPER |=(u32)  (copy_u8Type << (copy_u8PIN)); break;
 80005c8:	4b14      	ldr	r3, [pc, #80]	; (800061c <MGPIO_voidSetOutType+0x118>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	7979      	ldrb	r1, [r7, #5]
 80005ce:	79ba      	ldrb	r2, [r7, #6]
 80005d0:	fa01 f202 	lsl.w	r2, r1, r2
 80005d4:	4611      	mov	r1, r2
 80005d6:	4a11      	ldr	r2, [pc, #68]	; (800061c <MGPIO_voidSetOutType+0x118>)
 80005d8:	430b      	orrs	r3, r1
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	e00b      	b.n	80005f6 <MGPIO_voidSetOutType+0xf2>
						case GPIOH_PORT: GPIOH_OTYPER |=(u32)  (copy_u8Type << (copy_u8PIN)); break;		
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <MGPIO_voidSetOutType+0x11c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	7979      	ldrb	r1, [r7, #5]
 80005e4:	79ba      	ldrb	r2, [r7, #6]
 80005e6:	fa01 f202 	lsl.w	r2, r1, r2
 80005ea:	4611      	mov	r1, r2
 80005ec:	4a0c      	ldr	r2, [pc, #48]	; (8000620 <MGPIO_voidSetOutType+0x11c>)
 80005ee:	430b      	orrs	r3, r1
 80005f0:	6013      	str	r3, [r2, #0]
 80005f2:	e000      	b.n	80005f6 <MGPIO_voidSetOutType+0xf2>
						default: break;
 80005f4:	bf00      	nop
		      }
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40020004 	.word	0x40020004
 8000608:	40020404 	.word	0x40020404
 800060c:	40020804 	.word	0x40020804
 8000610:	40020c04 	.word	0x40020c04
 8000614:	40021004 	.word	0x40021004
 8000618:	40021404 	.word	0x40021404
 800061c:	40021804 	.word	0x40021804
 8000620:	40021c04 	.word	0x40021c04

08000624 <MGPIO_voidSetOutSpeed>:
							
							

						*/
	void MGPIO_voidSetOutSpeed(u8 copy_u8PORT ,u8 copy_u8PIN,u8 copy_u8Speed)  
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
 800062e:	460b      	mov	r3, r1
 8000630:	71bb      	strb	r3, [r7, #6]
 8000632:	4613      	mov	r3, r2
 8000634:	717b      	strb	r3, [r7, #5]
		      switch (copy_u8PORT)
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	2b07      	cmp	r3, #7
 800063a:	d873      	bhi.n	8000724 <MGPIO_voidSetOutSpeed+0x100>
 800063c:	a201      	add	r2, pc, #4	; (adr r2, 8000644 <MGPIO_voidSetOutSpeed+0x20>)
 800063e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000642:	bf00      	nop
 8000644:	08000665 	.word	0x08000665
 8000648:	0800067d 	.word	0x0800067d
 800064c:	08000695 	.word	0x08000695
 8000650:	080006ad 	.word	0x080006ad
 8000654:	080006c5 	.word	0x080006c5
 8000658:	080006dd 	.word	0x080006dd
 800065c:	080006f5 	.word	0x080006f5
 8000660:	0800070d 	.word	0x0800070d
		      {
			      case GPIOA_PORT: GPIOA_OSPEEDR |=(u32) (copy_u8Speed << (2*copy_u8PIN)); break;
 8000664:	4b33      	ldr	r3, [pc, #204]	; (8000734 <MGPIO_voidSetOutSpeed+0x110>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	7979      	ldrb	r1, [r7, #5]
 800066a:	79ba      	ldrb	r2, [r7, #6]
 800066c:	0052      	lsls	r2, r2, #1
 800066e:	fa01 f202 	lsl.w	r2, r1, r2
 8000672:	4611      	mov	r1, r2
 8000674:	4a2f      	ldr	r2, [pc, #188]	; (8000734 <MGPIO_voidSetOutSpeed+0x110>)
 8000676:	430b      	orrs	r3, r1
 8000678:	6013      	str	r3, [r2, #0]
 800067a:	e054      	b.n	8000726 <MGPIO_voidSetOutSpeed+0x102>
						case GPIOB_PORT: GPIOB_OSPEEDR |=(u32) (copy_u8Speed << (2*copy_u8PIN)); break;
 800067c:	4b2e      	ldr	r3, [pc, #184]	; (8000738 <MGPIO_voidSetOutSpeed+0x114>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	7979      	ldrb	r1, [r7, #5]
 8000682:	79ba      	ldrb	r2, [r7, #6]
 8000684:	0052      	lsls	r2, r2, #1
 8000686:	fa01 f202 	lsl.w	r2, r1, r2
 800068a:	4611      	mov	r1, r2
 800068c:	4a2a      	ldr	r2, [pc, #168]	; (8000738 <MGPIO_voidSetOutSpeed+0x114>)
 800068e:	430b      	orrs	r3, r1
 8000690:	6013      	str	r3, [r2, #0]
 8000692:	e048      	b.n	8000726 <MGPIO_voidSetOutSpeed+0x102>
						case GPIOC_PORT: GPIOC_OSPEEDR |=(u32) (copy_u8Speed << (2*copy_u8PIN)); break;
 8000694:	4b29      	ldr	r3, [pc, #164]	; (800073c <MGPIO_voidSetOutSpeed+0x118>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	7979      	ldrb	r1, [r7, #5]
 800069a:	79ba      	ldrb	r2, [r7, #6]
 800069c:	0052      	lsls	r2, r2, #1
 800069e:	fa01 f202 	lsl.w	r2, r1, r2
 80006a2:	4611      	mov	r1, r2
 80006a4:	4a25      	ldr	r2, [pc, #148]	; (800073c <MGPIO_voidSetOutSpeed+0x118>)
 80006a6:	430b      	orrs	r3, r1
 80006a8:	6013      	str	r3, [r2, #0]
 80006aa:	e03c      	b.n	8000726 <MGPIO_voidSetOutSpeed+0x102>
						case GPIOD_PORT: GPIOD_OSPEEDR |=(u32) (copy_u8Speed << (2*copy_u8PIN)); break;
 80006ac:	4b24      	ldr	r3, [pc, #144]	; (8000740 <MGPIO_voidSetOutSpeed+0x11c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	7979      	ldrb	r1, [r7, #5]
 80006b2:	79ba      	ldrb	r2, [r7, #6]
 80006b4:	0052      	lsls	r2, r2, #1
 80006b6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ba:	4611      	mov	r1, r2
 80006bc:	4a20      	ldr	r2, [pc, #128]	; (8000740 <MGPIO_voidSetOutSpeed+0x11c>)
 80006be:	430b      	orrs	r3, r1
 80006c0:	6013      	str	r3, [r2, #0]
 80006c2:	e030      	b.n	8000726 <MGPIO_voidSetOutSpeed+0x102>
						case GPIOE_PORT: GPIOE_OSPEEDR |=(u32) (copy_u8Speed << (2*copy_u8PIN)); break;
 80006c4:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <MGPIO_voidSetOutSpeed+0x120>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	7979      	ldrb	r1, [r7, #5]
 80006ca:	79ba      	ldrb	r2, [r7, #6]
 80006cc:	0052      	lsls	r2, r2, #1
 80006ce:	fa01 f202 	lsl.w	r2, r1, r2
 80006d2:	4611      	mov	r1, r2
 80006d4:	4a1b      	ldr	r2, [pc, #108]	; (8000744 <MGPIO_voidSetOutSpeed+0x120>)
 80006d6:	430b      	orrs	r3, r1
 80006d8:	6013      	str	r3, [r2, #0]
 80006da:	e024      	b.n	8000726 <MGPIO_voidSetOutSpeed+0x102>
						case GPIOF_PORT: GPIOF_OSPEEDR |=(u32) (copy_u8Speed << (2*copy_u8PIN)); break;
 80006dc:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <MGPIO_voidSetOutSpeed+0x124>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	7979      	ldrb	r1, [r7, #5]
 80006e2:	79ba      	ldrb	r2, [r7, #6]
 80006e4:	0052      	lsls	r2, r2, #1
 80006e6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ea:	4611      	mov	r1, r2
 80006ec:	4a16      	ldr	r2, [pc, #88]	; (8000748 <MGPIO_voidSetOutSpeed+0x124>)
 80006ee:	430b      	orrs	r3, r1
 80006f0:	6013      	str	r3, [r2, #0]
 80006f2:	e018      	b.n	8000726 <MGPIO_voidSetOutSpeed+0x102>
						case GPIOG_PORT: GPIOG_OSPEEDR |=(u32) (copy_u8Speed << (2*copy_u8PIN)); break;
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <MGPIO_voidSetOutSpeed+0x128>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	7979      	ldrb	r1, [r7, #5]
 80006fa:	79ba      	ldrb	r2, [r7, #6]
 80006fc:	0052      	lsls	r2, r2, #1
 80006fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000702:	4611      	mov	r1, r2
 8000704:	4a11      	ldr	r2, [pc, #68]	; (800074c <MGPIO_voidSetOutSpeed+0x128>)
 8000706:	430b      	orrs	r3, r1
 8000708:	6013      	str	r3, [r2, #0]
 800070a:	e00c      	b.n	8000726 <MGPIO_voidSetOutSpeed+0x102>
						case GPIOH_PORT: GPIOH_OSPEEDR |=(u32) (copy_u8Speed << (2*copy_u8PIN)); break;		
 800070c:	4b10      	ldr	r3, [pc, #64]	; (8000750 <MGPIO_voidSetOutSpeed+0x12c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	7979      	ldrb	r1, [r7, #5]
 8000712:	79ba      	ldrb	r2, [r7, #6]
 8000714:	0052      	lsls	r2, r2, #1
 8000716:	fa01 f202 	lsl.w	r2, r1, r2
 800071a:	4611      	mov	r1, r2
 800071c:	4a0c      	ldr	r2, [pc, #48]	; (8000750 <MGPIO_voidSetOutSpeed+0x12c>)
 800071e:	430b      	orrs	r3, r1
 8000720:	6013      	str	r3, [r2, #0]
 8000722:	e000      	b.n	8000726 <MGPIO_voidSetOutSpeed+0x102>
						default: break;		
 8000724:	bf00      	nop
			      
		      }
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40020008 	.word	0x40020008
 8000738:	40020408 	.word	0x40020408
 800073c:	40020808 	.word	0x40020808
 8000740:	40020c08 	.word	0x40020c08
 8000744:	40021008 	.word	0x40021008
 8000748:	40021408 	.word	0x40021408
 800074c:	40021808 	.word	0x40021808
 8000750:	40021c08 	.word	0x40021c08

08000754 <MGPIO_voidSetPull>:
					PULL_DOWN
	
	
		*/
	void MGPIO_voidSetPull(u8 copy_u8PORT ,u8 copy_u8PIN,u8 copy_u8PULL_TYPE)  
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
 800075e:	460b      	mov	r3, r1
 8000760:	71bb      	strb	r3, [r7, #6]
 8000762:	4613      	mov	r3, r2
 8000764:	717b      	strb	r3, [r7, #5]
		      switch (copy_u8PORT)
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2b07      	cmp	r3, #7
 800076a:	d873      	bhi.n	8000854 <MGPIO_voidSetPull+0x100>
 800076c:	a201      	add	r2, pc, #4	; (adr r2, 8000774 <MGPIO_voidSetPull+0x20>)
 800076e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000772:	bf00      	nop
 8000774:	08000795 	.word	0x08000795
 8000778:	080007ad 	.word	0x080007ad
 800077c:	080007c5 	.word	0x080007c5
 8000780:	080007dd 	.word	0x080007dd
 8000784:	080007f5 	.word	0x080007f5
 8000788:	0800080d 	.word	0x0800080d
 800078c:	08000825 	.word	0x08000825
 8000790:	0800083d 	.word	0x0800083d
		      {
			      case GPIOA_PORT: GPIOA_PUPDR |=(u32)  (copy_u8PULL_TYPE << (2*copy_u8PIN)); break;
 8000794:	4b33      	ldr	r3, [pc, #204]	; (8000864 <MGPIO_voidSetPull+0x110>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	7979      	ldrb	r1, [r7, #5]
 800079a:	79ba      	ldrb	r2, [r7, #6]
 800079c:	0052      	lsls	r2, r2, #1
 800079e:	fa01 f202 	lsl.w	r2, r1, r2
 80007a2:	4611      	mov	r1, r2
 80007a4:	4a2f      	ldr	r2, [pc, #188]	; (8000864 <MGPIO_voidSetPull+0x110>)
 80007a6:	430b      	orrs	r3, r1
 80007a8:	6013      	str	r3, [r2, #0]
 80007aa:	e054      	b.n	8000856 <MGPIO_voidSetPull+0x102>
						case GPIOB_PORT: GPIOB_PUPDR |=(u32)  (copy_u8PULL_TYPE << (2*copy_u8PIN)); break;
 80007ac:	4b2e      	ldr	r3, [pc, #184]	; (8000868 <MGPIO_voidSetPull+0x114>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	7979      	ldrb	r1, [r7, #5]
 80007b2:	79ba      	ldrb	r2, [r7, #6]
 80007b4:	0052      	lsls	r2, r2, #1
 80007b6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ba:	4611      	mov	r1, r2
 80007bc:	4a2a      	ldr	r2, [pc, #168]	; (8000868 <MGPIO_voidSetPull+0x114>)
 80007be:	430b      	orrs	r3, r1
 80007c0:	6013      	str	r3, [r2, #0]
 80007c2:	e048      	b.n	8000856 <MGPIO_voidSetPull+0x102>
						case GPIOC_PORT: GPIOC_PUPDR |=(u32)  (copy_u8PULL_TYPE << (2*copy_u8PIN)); break;
 80007c4:	4b29      	ldr	r3, [pc, #164]	; (800086c <MGPIO_voidSetPull+0x118>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	7979      	ldrb	r1, [r7, #5]
 80007ca:	79ba      	ldrb	r2, [r7, #6]
 80007cc:	0052      	lsls	r2, r2, #1
 80007ce:	fa01 f202 	lsl.w	r2, r1, r2
 80007d2:	4611      	mov	r1, r2
 80007d4:	4a25      	ldr	r2, [pc, #148]	; (800086c <MGPIO_voidSetPull+0x118>)
 80007d6:	430b      	orrs	r3, r1
 80007d8:	6013      	str	r3, [r2, #0]
 80007da:	e03c      	b.n	8000856 <MGPIO_voidSetPull+0x102>
						case GPIOD_PORT: GPIOD_PUPDR |=(u32)  (copy_u8PULL_TYPE << (2*copy_u8PIN)); break;
 80007dc:	4b24      	ldr	r3, [pc, #144]	; (8000870 <MGPIO_voidSetPull+0x11c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	7979      	ldrb	r1, [r7, #5]
 80007e2:	79ba      	ldrb	r2, [r7, #6]
 80007e4:	0052      	lsls	r2, r2, #1
 80007e6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ea:	4611      	mov	r1, r2
 80007ec:	4a20      	ldr	r2, [pc, #128]	; (8000870 <MGPIO_voidSetPull+0x11c>)
 80007ee:	430b      	orrs	r3, r1
 80007f0:	6013      	str	r3, [r2, #0]
 80007f2:	e030      	b.n	8000856 <MGPIO_voidSetPull+0x102>
						case GPIOE_PORT: GPIOE_PUPDR |=(u32)  (copy_u8PULL_TYPE << (2*copy_u8PIN)); break;
 80007f4:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <MGPIO_voidSetPull+0x120>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	7979      	ldrb	r1, [r7, #5]
 80007fa:	79ba      	ldrb	r2, [r7, #6]
 80007fc:	0052      	lsls	r2, r2, #1
 80007fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000802:	4611      	mov	r1, r2
 8000804:	4a1b      	ldr	r2, [pc, #108]	; (8000874 <MGPIO_voidSetPull+0x120>)
 8000806:	430b      	orrs	r3, r1
 8000808:	6013      	str	r3, [r2, #0]
 800080a:	e024      	b.n	8000856 <MGPIO_voidSetPull+0x102>
						case GPIOF_PORT: GPIOF_PUPDR |=(u32)  (copy_u8PULL_TYPE << (2*copy_u8PIN)); break;
 800080c:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MGPIO_voidSetPull+0x124>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	7979      	ldrb	r1, [r7, #5]
 8000812:	79ba      	ldrb	r2, [r7, #6]
 8000814:	0052      	lsls	r2, r2, #1
 8000816:	fa01 f202 	lsl.w	r2, r1, r2
 800081a:	4611      	mov	r1, r2
 800081c:	4a16      	ldr	r2, [pc, #88]	; (8000878 <MGPIO_voidSetPull+0x124>)
 800081e:	430b      	orrs	r3, r1
 8000820:	6013      	str	r3, [r2, #0]
 8000822:	e018      	b.n	8000856 <MGPIO_voidSetPull+0x102>
						case GPIOG_PORT: GPIOG_PUPDR |=(u32)  (copy_u8PULL_TYPE << (2*copy_u8PIN)); break;
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <MGPIO_voidSetPull+0x128>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	7979      	ldrb	r1, [r7, #5]
 800082a:	79ba      	ldrb	r2, [r7, #6]
 800082c:	0052      	lsls	r2, r2, #1
 800082e:	fa01 f202 	lsl.w	r2, r1, r2
 8000832:	4611      	mov	r1, r2
 8000834:	4a11      	ldr	r2, [pc, #68]	; (800087c <MGPIO_voidSetPull+0x128>)
 8000836:	430b      	orrs	r3, r1
 8000838:	6013      	str	r3, [r2, #0]
 800083a:	e00c      	b.n	8000856 <MGPIO_voidSetPull+0x102>
						case GPIOH_PORT: GPIOH_PUPDR |=(u32)  (copy_u8PULL_TYPE << (2*copy_u8PIN)); break;		
 800083c:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MGPIO_voidSetPull+0x12c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	7979      	ldrb	r1, [r7, #5]
 8000842:	79ba      	ldrb	r2, [r7, #6]
 8000844:	0052      	lsls	r2, r2, #1
 8000846:	fa01 f202 	lsl.w	r2, r1, r2
 800084a:	4611      	mov	r1, r2
 800084c:	4a0c      	ldr	r2, [pc, #48]	; (8000880 <MGPIO_voidSetPull+0x12c>)
 800084e:	430b      	orrs	r3, r1
 8000850:	6013      	str	r3, [r2, #0]
 8000852:	e000      	b.n	8000856 <MGPIO_voidSetPull+0x102>
						default: break;
 8000854:	bf00      	nop
			      
		      }
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	4002000c 	.word	0x4002000c
 8000868:	4002040c 	.word	0x4002040c
 800086c:	4002080c 	.word	0x4002080c
 8000870:	40020c0c 	.word	0x40020c0c
 8000874:	4002100c 	.word	0x4002100c
 8000878:	4002140c 	.word	0x4002140c
 800087c:	4002180c 	.word	0x4002180c
 8000880:	40021c0c 	.word	0x40021c0c

08000884 <MGPIO_voidWriteDataOdr>:
			* Function To Write Data At ODR	Value :
									 high 
									 low	
	*/
	void MGPIO_voidWriteDataOdr(u8 copy_u8PORT ,u8 copy_u8PIN , u8 copy_u8Value )
 {
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
 800088e:	460b      	mov	r3, r1
 8000890:	71bb      	strb	r3, [r7, #6]
 8000892:	4613      	mov	r3, r2
 8000894:	717b      	strb	r3, [r7, #5]
	
	 if(copy_u8Value == HIGH )
 8000896:	797b      	ldrb	r3, [r7, #5]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d167      	bne.n	800096c <MGPIO_voidWriteDataOdr+0xe8>
	 {
			switch (copy_u8PORT)
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	2b07      	cmp	r3, #7
 80008a0:	f200 80d2 	bhi.w	8000a48 <MGPIO_voidWriteDataOdr+0x1c4>
 80008a4:	a201      	add	r2, pc, #4	; (adr r2, 80008ac <MGPIO_voidWriteDataOdr+0x28>)
 80008a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008aa:	bf00      	nop
 80008ac:	080008cd 	.word	0x080008cd
 80008b0:	080008e1 	.word	0x080008e1
 80008b4:	080008f5 	.word	0x080008f5
 80008b8:	08000909 	.word	0x08000909
 80008bc:	0800091d 	.word	0x0800091d
 80008c0:	08000931 	.word	0x08000931
 80008c4:	08000945 	.word	0x08000945
 80008c8:	08000959 	.word	0x08000959
				{
						case GPIOA_PORT: GPIOA_ODR |= (1U << copy_u8PIN ); break;
 80008cc:	4b63      	ldr	r3, [pc, #396]	; (8000a5c <MGPIO_voidWriteDataOdr+0x1d8>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	79bb      	ldrb	r3, [r7, #6]
 80008d2:	2101      	movs	r1, #1
 80008d4:	fa01 f303 	lsl.w	r3, r1, r3
 80008d8:	4960      	ldr	r1, [pc, #384]	; (8000a5c <MGPIO_voidWriteDataOdr+0x1d8>)
 80008da:	4313      	orrs	r3, r2
 80008dc:	600b      	str	r3, [r1, #0]
 80008de:	e0b6      	b.n	8000a4e <MGPIO_voidWriteDataOdr+0x1ca>
						case GPIOB_PORT: GPIOB_ODR |= (1U << copy_u8PIN ); break;
 80008e0:	4b5f      	ldr	r3, [pc, #380]	; (8000a60 <MGPIO_voidWriteDataOdr+0x1dc>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	79bb      	ldrb	r3, [r7, #6]
 80008e6:	2101      	movs	r1, #1
 80008e8:	fa01 f303 	lsl.w	r3, r1, r3
 80008ec:	495c      	ldr	r1, [pc, #368]	; (8000a60 <MGPIO_voidWriteDataOdr+0x1dc>)
 80008ee:	4313      	orrs	r3, r2
 80008f0:	600b      	str	r3, [r1, #0]
 80008f2:	e0ac      	b.n	8000a4e <MGPIO_voidWriteDataOdr+0x1ca>
						case GPIOC_PORT: GPIOC_ODR |= (1U << copy_u8PIN ); break;
 80008f4:	4b5b      	ldr	r3, [pc, #364]	; (8000a64 <MGPIO_voidWriteDataOdr+0x1e0>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	79bb      	ldrb	r3, [r7, #6]
 80008fa:	2101      	movs	r1, #1
 80008fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000900:	4958      	ldr	r1, [pc, #352]	; (8000a64 <MGPIO_voidWriteDataOdr+0x1e0>)
 8000902:	4313      	orrs	r3, r2
 8000904:	600b      	str	r3, [r1, #0]
 8000906:	e0a2      	b.n	8000a4e <MGPIO_voidWriteDataOdr+0x1ca>
						case GPIOD_PORT: GPIOD_ODR |= (1U << copy_u8PIN ); break;
 8000908:	4b57      	ldr	r3, [pc, #348]	; (8000a68 <MGPIO_voidWriteDataOdr+0x1e4>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	79bb      	ldrb	r3, [r7, #6]
 800090e:	2101      	movs	r1, #1
 8000910:	fa01 f303 	lsl.w	r3, r1, r3
 8000914:	4954      	ldr	r1, [pc, #336]	; (8000a68 <MGPIO_voidWriteDataOdr+0x1e4>)
 8000916:	4313      	orrs	r3, r2
 8000918:	600b      	str	r3, [r1, #0]
 800091a:	e098      	b.n	8000a4e <MGPIO_voidWriteDataOdr+0x1ca>
						case GPIOE_PORT: GPIOE_ODR |= (1U << copy_u8PIN ); break;
 800091c:	4b53      	ldr	r3, [pc, #332]	; (8000a6c <MGPIO_voidWriteDataOdr+0x1e8>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	79bb      	ldrb	r3, [r7, #6]
 8000922:	2101      	movs	r1, #1
 8000924:	fa01 f303 	lsl.w	r3, r1, r3
 8000928:	4950      	ldr	r1, [pc, #320]	; (8000a6c <MGPIO_voidWriteDataOdr+0x1e8>)
 800092a:	4313      	orrs	r3, r2
 800092c:	600b      	str	r3, [r1, #0]
 800092e:	e08e      	b.n	8000a4e <MGPIO_voidWriteDataOdr+0x1ca>
						case GPIOF_PORT: GPIOF_ODR |= (1U << copy_u8PIN ); break;
 8000930:	4b4f      	ldr	r3, [pc, #316]	; (8000a70 <MGPIO_voidWriteDataOdr+0x1ec>)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	79bb      	ldrb	r3, [r7, #6]
 8000936:	2101      	movs	r1, #1
 8000938:	fa01 f303 	lsl.w	r3, r1, r3
 800093c:	494c      	ldr	r1, [pc, #304]	; (8000a70 <MGPIO_voidWriteDataOdr+0x1ec>)
 800093e:	4313      	orrs	r3, r2
 8000940:	600b      	str	r3, [r1, #0]
 8000942:	e084      	b.n	8000a4e <MGPIO_voidWriteDataOdr+0x1ca>
						case GPIOG_PORT: GPIOG_ODR |= (1U << copy_u8PIN ); break;
 8000944:	4b4b      	ldr	r3, [pc, #300]	; (8000a74 <MGPIO_voidWriteDataOdr+0x1f0>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	79bb      	ldrb	r3, [r7, #6]
 800094a:	2101      	movs	r1, #1
 800094c:	fa01 f303 	lsl.w	r3, r1, r3
 8000950:	4948      	ldr	r1, [pc, #288]	; (8000a74 <MGPIO_voidWriteDataOdr+0x1f0>)
 8000952:	4313      	orrs	r3, r2
 8000954:	600b      	str	r3, [r1, #0]
 8000956:	e07a      	b.n	8000a4e <MGPIO_voidWriteDataOdr+0x1ca>
						case GPIOH_PORT: GPIOH_ODR |= (1U << copy_u8PIN ); break;		
 8000958:	4b47      	ldr	r3, [pc, #284]	; (8000a78 <MGPIO_voidWriteDataOdr+0x1f4>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	79bb      	ldrb	r3, [r7, #6]
 800095e:	2101      	movs	r1, #1
 8000960:	fa01 f303 	lsl.w	r3, r1, r3
 8000964:	4944      	ldr	r1, [pc, #272]	; (8000a78 <MGPIO_voidWriteDataOdr+0x1f4>)
 8000966:	4313      	orrs	r3, r2
 8000968:	600b      	str	r3, [r1, #0]
 800096a:	e070      	b.n	8000a4e <MGPIO_voidWriteDataOdr+0x1ca>
					
				}
		}
	 else
	 {
		 switch (copy_u8PORT)
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2b07      	cmp	r3, #7
 8000970:	d86c      	bhi.n	8000a4c <MGPIO_voidWriteDataOdr+0x1c8>
 8000972:	a201      	add	r2, pc, #4	; (adr r2, 8000978 <MGPIO_voidWriteDataOdr+0xf4>)
 8000974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000978:	08000999 	.word	0x08000999
 800097c:	080009af 	.word	0x080009af
 8000980:	080009c5 	.word	0x080009c5
 8000984:	080009db 	.word	0x080009db
 8000988:	080009f1 	.word	0x080009f1
 800098c:	08000a07 	.word	0x08000a07
 8000990:	08000a1d 	.word	0x08000a1d
 8000994:	08000a33 	.word	0x08000a33
			{
					case GPIOA_PORT: GPIOA_ODR &=~ (1U << copy_u8PIN); break;
 8000998:	4b30      	ldr	r3, [pc, #192]	; (8000a5c <MGPIO_voidWriteDataOdr+0x1d8>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	79bb      	ldrb	r3, [r7, #6]
 800099e:	2101      	movs	r1, #1
 80009a0:	fa01 f303 	lsl.w	r3, r1, r3
 80009a4:	43db      	mvns	r3, r3
 80009a6:	492d      	ldr	r1, [pc, #180]	; (8000a5c <MGPIO_voidWriteDataOdr+0x1d8>)
 80009a8:	4013      	ands	r3, r2
 80009aa:	600b      	str	r3, [r1, #0]
 80009ac:	e04f      	b.n	8000a4e <MGPIO_voidWriteDataOdr+0x1ca>
					case GPIOB_PORT: GPIOB_ODR &=~ (1U << copy_u8PIN); break;
 80009ae:	4b2c      	ldr	r3, [pc, #176]	; (8000a60 <MGPIO_voidWriteDataOdr+0x1dc>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	79bb      	ldrb	r3, [r7, #6]
 80009b4:	2101      	movs	r1, #1
 80009b6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ba:	43db      	mvns	r3, r3
 80009bc:	4928      	ldr	r1, [pc, #160]	; (8000a60 <MGPIO_voidWriteDataOdr+0x1dc>)
 80009be:	4013      	ands	r3, r2
 80009c0:	600b      	str	r3, [r1, #0]
 80009c2:	e044      	b.n	8000a4e <MGPIO_voidWriteDataOdr+0x1ca>
					case GPIOC_PORT: GPIOC_ODR &=~ (1U << copy_u8PIN); break;
 80009c4:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <MGPIO_voidWriteDataOdr+0x1e0>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	79bb      	ldrb	r3, [r7, #6]
 80009ca:	2101      	movs	r1, #1
 80009cc:	fa01 f303 	lsl.w	r3, r1, r3
 80009d0:	43db      	mvns	r3, r3
 80009d2:	4924      	ldr	r1, [pc, #144]	; (8000a64 <MGPIO_voidWriteDataOdr+0x1e0>)
 80009d4:	4013      	ands	r3, r2
 80009d6:	600b      	str	r3, [r1, #0]
 80009d8:	e039      	b.n	8000a4e <MGPIO_voidWriteDataOdr+0x1ca>
					case GPIOD_PORT: GPIOD_ODR &=~ (1U << copy_u8PIN); break;
 80009da:	4b23      	ldr	r3, [pc, #140]	; (8000a68 <MGPIO_voidWriteDataOdr+0x1e4>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	79bb      	ldrb	r3, [r7, #6]
 80009e0:	2101      	movs	r1, #1
 80009e2:	fa01 f303 	lsl.w	r3, r1, r3
 80009e6:	43db      	mvns	r3, r3
 80009e8:	491f      	ldr	r1, [pc, #124]	; (8000a68 <MGPIO_voidWriteDataOdr+0x1e4>)
 80009ea:	4013      	ands	r3, r2
 80009ec:	600b      	str	r3, [r1, #0]
 80009ee:	e02e      	b.n	8000a4e <MGPIO_voidWriteDataOdr+0x1ca>
					case GPIOE_PORT: GPIOE_ODR &=~ (1U << copy_u8PIN); break;
 80009f0:	4b1e      	ldr	r3, [pc, #120]	; (8000a6c <MGPIO_voidWriteDataOdr+0x1e8>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	79bb      	ldrb	r3, [r7, #6]
 80009f6:	2101      	movs	r1, #1
 80009f8:	fa01 f303 	lsl.w	r3, r1, r3
 80009fc:	43db      	mvns	r3, r3
 80009fe:	491b      	ldr	r1, [pc, #108]	; (8000a6c <MGPIO_voidWriteDataOdr+0x1e8>)
 8000a00:	4013      	ands	r3, r2
 8000a02:	600b      	str	r3, [r1, #0]
 8000a04:	e023      	b.n	8000a4e <MGPIO_voidWriteDataOdr+0x1ca>
					case GPIOF_PORT: GPIOF_ODR &=~ (1U << copy_u8PIN); break;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <MGPIO_voidWriteDataOdr+0x1ec>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	79bb      	ldrb	r3, [r7, #6]
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a12:	43db      	mvns	r3, r3
 8000a14:	4916      	ldr	r1, [pc, #88]	; (8000a70 <MGPIO_voidWriteDataOdr+0x1ec>)
 8000a16:	4013      	ands	r3, r2
 8000a18:	600b      	str	r3, [r1, #0]
 8000a1a:	e018      	b.n	8000a4e <MGPIO_voidWriteDataOdr+0x1ca>
					case GPIOG_PORT: GPIOG_ODR &=~ (1U << copy_u8PIN); break;
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <MGPIO_voidWriteDataOdr+0x1f0>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	79bb      	ldrb	r3, [r7, #6]
 8000a22:	2101      	movs	r1, #1
 8000a24:	fa01 f303 	lsl.w	r3, r1, r3
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	4912      	ldr	r1, [pc, #72]	; (8000a74 <MGPIO_voidWriteDataOdr+0x1f0>)
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	600b      	str	r3, [r1, #0]
 8000a30:	e00d      	b.n	8000a4e <MGPIO_voidWriteDataOdr+0x1ca>
					case GPIOH_PORT: GPIOH_ODR &=~ (1U << copy_u8PIN); break;		
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MGPIO_voidWriteDataOdr+0x1f4>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	79bb      	ldrb	r3, [r7, #6]
 8000a38:	2101      	movs	r1, #1
 8000a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	490d      	ldr	r1, [pc, #52]	; (8000a78 <MGPIO_voidWriteDataOdr+0x1f4>)
 8000a42:	4013      	ands	r3, r2
 8000a44:	600b      	str	r3, [r1, #0]
 8000a46:	e002      	b.n	8000a4e <MGPIO_voidWriteDataOdr+0x1ca>
						default: break;	
 8000a48:	bf00      	nop
 8000a4a:	e000      	b.n	8000a4e <MGPIO_voidWriteDataOdr+0x1ca>
					default: break;	
 8000a4c:	bf00      	nop
				
			}
		 
	 }
	
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40020014 	.word	0x40020014
 8000a60:	40020414 	.word	0x40020414
 8000a64:	40020814 	.word	0x40020814
 8000a68:	40020c14 	.word	0x40020c14
 8000a6c:	40021014 	.word	0x40021014
 8000a70:	40021414 	.word	0x40021414
 8000a74:	40021814 	.word	0x40021814
 8000a78:	40021c14 	.word	0x40021c14

08000a7c <MNVIC_VidSetPending>:
	MNVIC->ICER[ Copy_u8INTID / 32 ] = 1 << ( Copy_u8INTID % 32 ) ;

}


void MNVIC_VidSetPending ( u8 Copy_u8INTID ){
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]

	MNVIC->ISPR[ Copy_u8INTID / 32 ] = 1 << ( Copy_u8INTID % 32 ) ;
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	f003 031f 	and.w	r3, r3, #31
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	fa02 f103 	lsl.w	r1, r2, r3
 8000a92:	4a06      	ldr	r2, [pc, #24]	; (8000aac <MNVIC_VidSetPending+0x30>)
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	095b      	lsrs	r3, r3, #5
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	3340      	adds	r3, #64	; 0x40
 8000a9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000e100 	.word	0xe000e100

08000ab0 <MNVIC_voidSetEnable>:
/********************************************************** Start_FUNCTION  **********************************************************/
/*		Function :	
					Take The Number Of Interrput Number To Enable it At STm ----> 90
						*/
void MNVIC_voidSetEnable(u8 Copy_u8IntNum ) 
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
	if (Copy_u8IntNum <=31  )
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b1f      	cmp	r3, #31
 8000abe:	d806      	bhi.n	8000ace <MNVIC_voidSetEnable+0x1e>
	{ /* 0-----> no effect*/
	   NVIC_ISER0= (1U <<Copy_u8IntNum);  
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <MNVIC_voidSetEnable+0x5c>)
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aca:	6013      	str	r3, [r2, #0]
	else 
	{
		/* return error */
	}
	
}
 8000acc:	e018      	b.n	8000b00 <MNVIC_voidSetEnable+0x50>
	else if( (Copy_u8IntNum <= 63))
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	2b3f      	cmp	r3, #63	; 0x3f
 8000ad2:	d809      	bhi.n	8000ae8 <MNVIC_voidSetEnable+0x38>
		Copy_u8IntNum-=32 ; 
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	3b20      	subs	r3, #32
 8000ad8:	71fb      	strb	r3, [r7, #7]
		NVIC_ISER1= (1U <<Copy_u8IntNum); 
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	4a0c      	ldr	r2, [pc, #48]	; (8000b10 <MNVIC_voidSetEnable+0x60>)
 8000ade:	2101      	movs	r1, #1
 8000ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae4:	6013      	str	r3, [r2, #0]
}
 8000ae6:	e00b      	b.n	8000b00 <MNVIC_voidSetEnable+0x50>
	else if(Copy_u8IntNum <= 90)
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	2b5a      	cmp	r3, #90	; 0x5a
 8000aec:	d808      	bhi.n	8000b00 <MNVIC_voidSetEnable+0x50>
		Copy_u8IntNum-=64 ;
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	3b40      	subs	r3, #64	; 0x40
 8000af2:	71fb      	strb	r3, [r7, #7]
		NVIC_ISER2= (1U <<Copy_u8IntNum);
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <MNVIC_voidSetEnable+0x64>)
 8000af8:	2101      	movs	r1, #1
 8000afa:	fa01 f303 	lsl.w	r3, r1, r3
 8000afe:	6013      	str	r3, [r2, #0]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000e100 	.word	0xe000e100
 8000b10:	e000e204 	.word	0xe000e204
 8000b14:	e000e208 	.word	0xe000e208

08000b18 <MRCC_voidEnableClock>:

\
/************************************ Start_FUNCTION  ************************************/

 void MRCC_voidEnableClock (BusName_t BusName ,u8 Copy_u8PerName  )
 {
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	460a      	mov	r2, r1
 8000b22:	71fb      	strb	r3, [r7, #7]
 8000b24:	4613      	mov	r3, r2
 8000b26:	71bb      	strb	r3, [r7, #6]
	 switch(BusName) 
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	d83e      	bhi.n	8000bac <MRCC_voidEnableClock+0x94>
 8000b2e:	a201      	add	r2, pc, #4	; (adr r2, 8000b34 <MRCC_voidEnableClock+0x1c>)
 8000b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b34:	08000b49 	.word	0x08000b49
 8000b38:	08000b5d 	.word	0x08000b5d
 8000b3c:	08000b71 	.word	0x08000b71
 8000b40:	08000b85 	.word	0x08000b85
 8000b44:	08000b99 	.word	0x08000b99
	 {
		 case AHB1_BUS :
			SET_BIT(RCC_AHB1ENR , Copy_u8PerName  ) ;
 8000b48:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <MRCC_voidEnableClock+0xa0>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	79bb      	ldrb	r3, [r7, #6]
 8000b4e:	2101      	movs	r1, #1
 8000b50:	fa01 f303 	lsl.w	r3, r1, r3
 8000b54:	4918      	ldr	r1, [pc, #96]	; (8000bb8 <MRCC_voidEnableClock+0xa0>)
 8000b56:	4313      	orrs	r3, r2
 8000b58:	600b      	str	r3, [r1, #0]
		 break ; 
 8000b5a:	e027      	b.n	8000bac <MRCC_voidEnableClock+0x94>
		 
		 case AHB2_BUS  :
			SET_BIT(RCC_AHB2ENR , Copy_u8PerName  ) ;
 8000b5c:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <MRCC_voidEnableClock+0xa4>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	79bb      	ldrb	r3, [r7, #6]
 8000b62:	2101      	movs	r1, #1
 8000b64:	fa01 f303 	lsl.w	r3, r1, r3
 8000b68:	4914      	ldr	r1, [pc, #80]	; (8000bbc <MRCC_voidEnableClock+0xa4>)
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	600b      	str	r3, [r1, #0]
		 break ;
 8000b6e:	e01d      	b.n	8000bac <MRCC_voidEnableClock+0x94>
		 
		 case AHB3_BUS  :
			 SET_BIT(RCC_AHB3ENR , Copy_u8PerName  ) ;
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <MRCC_voidEnableClock+0xa8>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	79bb      	ldrb	r3, [r7, #6]
 8000b76:	2101      	movs	r1, #1
 8000b78:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7c:	4910      	ldr	r1, [pc, #64]	; (8000bc0 <MRCC_voidEnableClock+0xa8>)
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	600b      	str	r3, [r1, #0]
		 break ;
 8000b82:	e013      	b.n	8000bac <MRCC_voidEnableClock+0x94>
		 
		 case APB1_BUS  :
			SET_BIT(RCC_APB1LPENR , Copy_u8PerName  ) ;	
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MRCC_voidEnableClock+0xac>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	79bb      	ldrb	r3, [r7, #6]
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b90:	490c      	ldr	r1, [pc, #48]	; (8000bc4 <MRCC_voidEnableClock+0xac>)
 8000b92:	4313      	orrs	r3, r2
 8000b94:	600b      	str	r3, [r1, #0]
		 break ;
 8000b96:	e009      	b.n	8000bac <MRCC_voidEnableClock+0x94>
		 
		 case APB2_BUS  :
			SET_BIT(RCC_APB2LPENR , Copy_u8PerName  ) ;	
 8000b98:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MRCC_voidEnableClock+0xb0>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	79bb      	ldrb	r3, [r7, #6]
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba4:	4908      	ldr	r1, [pc, #32]	; (8000bc8 <MRCC_voidEnableClock+0xb0>)
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	600b      	str	r3, [r1, #0]
		 break ;
 8000baa:	bf00      	nop
		 
			/*default		:  break;*/
		 
		 
	 }
 }
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	40023830 	.word	0x40023830
 8000bbc:	40023834 	.word	0x40023834
 8000bc0:	40023838 	.word	0x40023838
 8000bc4:	40023860 	.word	0x40023860
 8000bc8:	40023864 	.word	0x40023864

08000bcc <MSTK_vBusyWait>:
	CLR_BIT(STK ->CTRL , 2);	
   #endif
}

void MSTK_vBusyWait(u32 Copy_u32Tick)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	/* Value in load */
	STK -> LOAD =Copy_u32Tick ;
 8000bd4:	4a11      	ldr	r2, [pc, #68]	; (8000c1c <MSTK_vBusyWait+0x50>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6053      	str	r3, [r2, #4]
	/* Start timer */
	SET_BIT(STK ->CTRL , 0);
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <MSTK_vBusyWait+0x50>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a0f      	ldr	r2, [pc, #60]	; (8000c1c <MSTK_vBusyWait+0x50>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6013      	str	r3, [r2, #0]
	/* Polling */
	while( (GET_BIT(STK->CTRL,16)) == 0);
 8000be6:	bf00      	nop
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <MSTK_vBusyWait+0x50>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	0c1b      	lsrs	r3, r3, #16
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d0f8      	beq.n	8000be8 <MSTK_vBusyWait+0x1c>
	/* Stop Timer */
	CLR_BIT(STK ->CTRL , 0);
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <MSTK_vBusyWait+0x50>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a08      	ldr	r2, [pc, #32]	; (8000c1c <MSTK_vBusyWait+0x50>)
 8000bfc:	f023 0301 	bic.w	r3, r3, #1
 8000c00:	6013      	str	r3, [r2, #0]
	STK -> LOAD=0;
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <MSTK_vBusyWait+0x50>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	605a      	str	r2, [r3, #4]
	STK -> VAL=0;
 8000c08:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <MSTK_vBusyWait+0x50>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000e010 	.word	0xe000e010

08000c20 <SysTick_Handler>:
   STK-> LOAD = 0U ;

}

void SysTick_Handler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	
/* Callback notification */
	MSTK_CallBack();
 8000c24:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <SysTick_Handler+0x3c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4798      	blx	r3
/* if single ==  MSTK_SINGLE_INTERVAL  */
 if(MSTK_u8ModeOfInterval == MSTK_SINGLE_INTERVAL )
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <SysTick_Handler+0x40>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d10b      	bne.n	8000c4a <SysTick_Handler+0x2a>
 {
	/* STOP Timer  */
	 CLR_BIT( STK-> CTRL ,0U);
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <SysTick_Handler+0x44>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a0b      	ldr	r2, [pc, #44]	; (8000c64 <SysTick_Handler+0x44>)
 8000c38:	f023 0301 	bic.w	r3, r3, #1
 8000c3c:	6013      	str	r3, [r2, #0]
	/* SET Value =0 */
	 STK-> VAL= 0U ;
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <SysTick_Handler+0x44>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
	/* SET load =0 */
	 STK-> LOAD = 0U ;
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <SysTick_Handler+0x44>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	605a      	str	r2, [r3, #4]
	
 }
 
/* Clear interrupt flag  to Start agine if exception Come agine */
 CLR_BIT( STK-> CTRL ,16U);
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <SysTick_Handler+0x44>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <SysTick_Handler+0x44>)
 8000c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c54:	6013      	str	r3, [r2, #0]

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2000001c 	.word	0x2000001c
 8000c60:	20000028 	.word	0x20000028
 8000c64:	e000e010 	.word	0xe000e010

08000c68 <main>:
void MEXTI_voidSetCallBack(void (*ptr) (void));

volatile u32 test =0 ;

int main(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	/* Init RCC  AHB --> 8000000						*/



    /* EN CLK PORT_A BUS -->  , NUM -->  */
	MRCC_voidEnableClock(AHB1, 0U);
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f7ff ff52 	bl	8000b18 <MRCC_voidEnableClock>

	/*  Set Pines      */
	Set_vPin();
 8000c74:	f000 f858 	bl	8000d28 <Set_vPin>

	/* Set Call Back EXTI0,1 */
	MEXTI_voidSetCallBack(abdo);
 8000c78:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <main+0x48>)
 8000c7a:	f000 f81d 	bl	8000cb8 <MEXTI_voidSetCallBack>



	 /* Enable Line ( A0....H0) & (A1...H1) */
	 MEXTI_vEnableLine(0);
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f7ff faa8 	bl	80001d4 <MEXTI_vEnableLine>

     /* */

    /* Select (PIN0,1) PORT  A */
	MEXTI_voidSelectPort(  0 , 0b0000 );
 8000c84:	2100      	movs	r1, #0
 8000c86:	2000      	movs	r0, #0
 8000c88:	f7ff fb14 	bl	80002b4 <MEXTI_voidSelectPort>

    /* State FALL  */
	MEXTI_vTriggerTyp(0,RAISE);
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f7ff fab6 	bl	8000200 <MEXTI_vTriggerTyp>



	/* Enable  EXT0  from NVIC  */
		 MNVIC_voidSetEnable(6);
 8000c94:	2006      	movs	r0, #6
 8000c96:	f7ff ff0b 	bl	8000ab0 <MNVIC_voidSetEnable>
	while(1)
	{

		if(test == 1)
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <main+0x4c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d1fb      	bne.n	8000c9a <main+0x32>
		{
			test =0 ;
 8000ca2:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <main+0x4c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
			MNVIC_VidSetPending(6);
 8000ca8:	2006      	movs	r0, #6
 8000caa:	f7ff fee7 	bl	8000a7c <MNVIC_VidSetPending>
		if(test == 1)
 8000cae:	e7f4      	b.n	8000c9a <main+0x32>
 8000cb0:	08000cfd 	.word	0x08000cfd
 8000cb4:	20000024 	.word	0x20000024

08000cb8 <MEXTI_voidSetCallBack>:
	return 0;

}

void MEXTI_voidSetCallBack(void (*ptr) (void)) // abdo
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
		EXTI0_CallBack = ptr ;
 8000cc0:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <MEXTI_voidSetCallBack+0x1c>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6013      	str	r3, [r2, #0]
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20000020 	.word	0x20000020

08000cd8 <EXTI0_IRQHandler>:

void	EXTI0_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	EXTI0_CallBack();
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <EXTI0_IRQHandler+0x1c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4798      	blx	r3
	/*	Clear pending Bit		*/
	SET_BIT(EXTI -> PR , 0);
 8000ce2:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <EXTI0_IRQHandler+0x20>)
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <EXTI0_IRQHandler+0x20>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6153      	str	r3, [r2, #20]

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000020 	.word	0x20000020
 8000cf8:	40013c00 	.word	0x40013c00

08000cfc <abdo>:



void abdo (void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
	MGPIO_voidWriteDataOdr(GPIOA_PORT ,A2, HIGH);
 8000d00:	2201      	movs	r2, #1
 8000d02:	2102      	movs	r1, #2
 8000d04:	2000      	movs	r0, #0
 8000d06:	f7ff fdbd 	bl	8000884 <MGPIO_voidWriteDataOdr>
	/*Delay for 1 Sec		*/
	MSTK_vBusyWait(1000000);
 8000d0a:	4806      	ldr	r0, [pc, #24]	; (8000d24 <abdo+0x28>)
 8000d0c:	f7ff ff5e 	bl	8000bcc <MSTK_vBusyWait>

	MGPIO_voidWriteDataOdr(GPIOA_PORT ,A2, HIGH);
 8000d10:	2201      	movs	r2, #1
 8000d12:	2102      	movs	r1, #2
 8000d14:	2000      	movs	r0, #0
 8000d16:	f7ff fdb5 	bl	8000884 <MGPIO_voidWriteDataOdr>
	/*Delay for 1 Sec		*/
	MSTK_vBusyWait(1000000);
 8000d1a:	4802      	ldr	r0, [pc, #8]	; (8000d24 <abdo+0x28>)
 8000d1c:	f7ff ff56 	bl	8000bcc <MSTK_vBusyWait>

}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	000f4240 	.word	0x000f4240

08000d28 <Set_vPin>:



void Set_vPin(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0

	    /* 2 - Set pin as INPUT   */
		MGOIP_voidSetPinMode(GPIOA_PORT,A0,MODE_INPUT);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2100      	movs	r1, #0
 8000d30:	2000      	movs	r0, #0
 8000d32:	f7ff fb4f 	bl	80003d4 <MGOIP_voidSetPinMode>

		/* 3 - PULL DOWEN  */
		MGPIO_voidSetPull(GPIOA_PORT,A0,PULL_DOWN)  ;
 8000d36:	2211      	movs	r2, #17
 8000d38:	2100      	movs	r1, #0
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f7ff fd0a 	bl	8000754 <MGPIO_voidSetPull>


		/* 4 - Set pin as INPUT   */
		MGOIP_voidSetPinMode(GPIOA_PORT , A2 , MODE_OUTPUT);
 8000d40:	2201      	movs	r2, #1
 8000d42:	2102      	movs	r1, #2
 8000d44:	2000      	movs	r0, #0
 8000d46:	f7ff fb45 	bl	80003d4 <MGOIP_voidSetPinMode>

		/* 5 - Set pin as INPUT   */
		MGPIO_voidSetOutType(GPIOA_PORT , A2, OUTPUT_TYPE_PUSH_PULL );
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f7ff fbd8 	bl	8000504 <MGPIO_voidSetOutType>

		/* 6 - Set pin as INPUT   */
		MGPIO_voidSetOutSpeed(GPIOA_PORT , A2 , OUTPUT_LOW_SPEED);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2102      	movs	r1, #2
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f7ff fc63 	bl	8000624 <MGPIO_voidSetOutSpeed>


}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d64:	480d      	ldr	r0, [pc, #52]	; (8000d9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d66:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d68:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d6c:	480c      	ldr	r0, [pc, #48]	; (8000da0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d6e:	490d      	ldr	r1, [pc, #52]	; (8000da4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d70:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <LoopForever+0xe>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d74:	e002      	b.n	8000d7c <LoopCopyDataInit>

08000d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7a:	3304      	adds	r3, #4

08000d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d80:	d3f9      	bcc.n	8000d76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d84:	4c0a      	ldr	r4, [pc, #40]	; (8000db0 <LoopForever+0x16>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d88:	e001      	b.n	8000d8e <LoopFillZerobss>

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d8c:	3204      	adds	r2, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d92:	f000 f811 	bl	8000db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d96:	f7ff ff67 	bl	8000c68 <main>

08000d9a <LoopForever>:

LoopForever:
    b LoopForever
 8000d9a:	e7fe      	b.n	8000d9a <LoopForever>
  ldr   r0, =_estack
 8000d9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000da8:	08000e20 	.word	0x08000e20
  ldr r2, =_sbss
 8000dac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000db0:	2000002c 	.word	0x2000002c

08000db4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC_IRQHandler>
	...

08000db8 <__libc_init_array>:
 8000db8:	b570      	push	{r4, r5, r6, lr}
 8000dba:	4d0d      	ldr	r5, [pc, #52]	; (8000df0 <__libc_init_array+0x38>)
 8000dbc:	4c0d      	ldr	r4, [pc, #52]	; (8000df4 <__libc_init_array+0x3c>)
 8000dbe:	1b64      	subs	r4, r4, r5
 8000dc0:	10a4      	asrs	r4, r4, #2
 8000dc2:	2600      	movs	r6, #0
 8000dc4:	42a6      	cmp	r6, r4
 8000dc6:	d109      	bne.n	8000ddc <__libc_init_array+0x24>
 8000dc8:	4d0b      	ldr	r5, [pc, #44]	; (8000df8 <__libc_init_array+0x40>)
 8000dca:	4c0c      	ldr	r4, [pc, #48]	; (8000dfc <__libc_init_array+0x44>)
 8000dcc:	f000 f818 	bl	8000e00 <_init>
 8000dd0:	1b64      	subs	r4, r4, r5
 8000dd2:	10a4      	asrs	r4, r4, #2
 8000dd4:	2600      	movs	r6, #0
 8000dd6:	42a6      	cmp	r6, r4
 8000dd8:	d105      	bne.n	8000de6 <__libc_init_array+0x2e>
 8000dda:	bd70      	pop	{r4, r5, r6, pc}
 8000ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000de0:	4798      	blx	r3
 8000de2:	3601      	adds	r6, #1
 8000de4:	e7ee      	b.n	8000dc4 <__libc_init_array+0xc>
 8000de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dea:	4798      	blx	r3
 8000dec:	3601      	adds	r6, #1
 8000dee:	e7f2      	b.n	8000dd6 <__libc_init_array+0x1e>
 8000df0:	08000e18 	.word	0x08000e18
 8000df4:	08000e18 	.word	0x08000e18
 8000df8:	08000e18 	.word	0x08000e18
 8000dfc:	08000e1c 	.word	0x08000e1c

08000e00 <_init>:
 8000e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e02:	bf00      	nop
 8000e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e06:	bc08      	pop	{r3}
 8000e08:	469e      	mov	lr, r3
 8000e0a:	4770      	bx	lr

08000e0c <_fini>:
 8000e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e0e:	bf00      	nop
 8000e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e12:	bc08      	pop	{r3}
 8000e14:	469e      	mov	lr, r3
 8000e16:	4770      	bx	lr
